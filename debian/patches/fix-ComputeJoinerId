Index: ot-br-posix/src/utils/steering_data.cpp
===================================================================
--- ot-br-posix.orig/src/utils/steering_data.cpp
+++ ot-br-posix/src/utils/steering_data.cpp
@@ -44,20 +44,25 @@ void SteeringData::Init(uint8_t aLength)
     Clear();
 }
 
-void SteeringData::ComputeJoinerId(const uint8_t *aEui64, uint8_t *aJoinerId)
+int SteeringData::ComputeJoinerId(const uint8_t *aEui64, uint8_t *aJoinerId)
 {
+    int                    ret                   = 0;
     const size_t           kSizeHashSha256Output = 32;
     const size_t           kSizeEui64            = 8;
     uint8_t                hash[kSizeHashSha256Output];
     mbedtls_sha256_context sha256;
 
     mbedtls_sha256_init(&sha256);
-    mbedtls_sha256_starts(&sha256, 0);
-    mbedtls_sha256_update(&sha256, aEui64, kSizeEui64);
-    mbedtls_sha256_finish(&sha256, hash);
+    ret = mbedtls_sha256_starts_ret(&sha256, 0);
+    if(!ret) return ret;
+    ret = mbedtls_sha256_update_ret(&sha256, aEui64, kSizeEui64);
+    if(!ret) return ret;
+    ret = mbedtls_sha256_finish_ret(&sha256, hash);
+    if(!ret) return ret;
 
     memcpy(aJoinerId, hash, kSizeJoinerId);
     aJoinerId[0] |= 2;
+    return 0;
 }
 
 void SteeringData::ComputeBloomFilter(const uint8_t *aJoinerId)
Index: ot-br-posix/src/utils/steering_data.hpp
===================================================================
--- ot-br-posix.orig/src/utils/steering_data.hpp
+++ ot-br-posix/src/utils/steering_data.hpp
@@ -97,7 +97,7 @@ public:
      * @param[out]  aJoinerId   A pointer to receive joiner id. This pointer can be the same as @p aEui64.
      *
      */
-    static void ComputeJoinerId(const uint8_t *aEui64, uint8_t *aJoinerId);
+    static int ComputeJoinerId(const uint8_t *aEui64, uint8_t *aJoinerId);
 
     /**
      * This method returns a pointer to the bloom filter.
Index: ot-br-posix/tools/steering_data.cpp
===================================================================
--- ot-br-posix.orig/tools/steering_data.cpp
+++ ot-br-posix/tools/steering_data.cpp
@@ -58,8 +58,7 @@ int ComputeJoinerId(const char *aEui64,
     VerifyOrExit(strlen(aEui64) == otbr::SteeringData::kSizeJoinerId * 2);
     VerifyOrExit(otbr::Utils::Hex2Bytes(aEui64, aJoinerId, otbr::SteeringData::kSizeJoinerId) ==
                  otbr::SteeringData::kSizeJoinerId);
-    otbr::SteeringData::ComputeJoinerId(aJoinerId, aJoinerId);
-    ret = 0;
+    ret = otbr::SteeringData::ComputeJoinerId(aJoinerId, aJoinerId);
 
 exit:
     if (ret != 0)
